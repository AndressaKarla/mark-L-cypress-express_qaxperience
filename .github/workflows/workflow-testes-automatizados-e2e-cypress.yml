name: Pipeline Testes Automatizados E2E (Ponta a Ponta) Cypress

# executa o workflow toda vez que for realizado um push ou pull-request no repositório
on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
    
  # permite também executar esse workflow manualmente na aba "Actions" do GitHub
  workflow_dispatch:
    # entrada de dados
    inputs:
      spec: 
        description: Executar testes em modo headless por spec (suíte de testes) 
        # executar por padrão todas as suítes de testes presentes na pasta "e2e" 
        default: cypress/e2e/* 

jobs:
  # utilizado para garantir que os testes funcionais são executados com sucesso
  testes-automatizados-e2e-cypress-chrome:
    # tempo máximo para execução de uma tarefa antes que o GitHub a cancele automaticamente
    timeout-minutes: 60
    runs-on: ubuntu-latest
    
    # template cypress com todas as dependências necessárias para executar os testes
    container:
      image: cypress/browsers:node18.12.0-chrome103-ff107
      # usuário com perfil administrador
      options: --user 1001
      
    steps:
      - name: Passo 1 - Obter cópia do código-fonte do repositório
        uses: actions/checkout@v3.3.0
        
      - name: Passo 2 - Instalar dependências Mark L (apps > api)
        run: |
          cd '/__w/mark-L-cypress-express_qaxperience/mark-L-cypress-express_qaxperience/apps/api'
          yarn install
        
      - name: Passo 3 - Instalar dependências Mark L (apps > web)
        run: |
          cd '/__w/mark-L-cypress-express_qaxperience/mark-L-cypress-express_qaxperience/apps/web' 
          yarn install
          
      - name: Passo 4 - Executar Mark L (apps > api e apps > web) em 2º plano em um ambiente de desenvolvimento local, Executar testes em modo headless e Gerar os resultados dos testes
        run: |
          # verificar se as dependências Mark L (apps > api e apps > web) estão instaladas
          yarn --cwd ./apps/api check
          yarn --cwd ./apps/web check
          
          # executar Mark L (apps > api e apps > web) em 2º plano em um ambiente de desenvolvimento local
          yarn --cwd ./apps/api start &
          yarn --cwd ./apps/web start &
          
          # aguardar até que Mark L (apps > web) esteja pronto para acessar
          while ! curl -sSf http://localhost:8080 > /dev/null; do sleep 1; done
          
          # instalar dependências cypress
          yarn --cwd ../.. install
          
          # executar os testes em modo headless e gerar os resultados dos testes
          yarn cypress run --spec '${{ github.event.inputs.spec }}' --browser chrome --headless
          
      - name: Passo 5 - Armazenar os resultados dos testes em vídeos
        uses: actions/upload-artifact@v3
        if: ${{ always() }}
        with:
          name: cypress-videos-chrome
          path: cypress/videos
          # armazena por 30 dias
          retention-days: 30

      - name: Passo 6 - Armazenar os resultados dos testes que falharam em screenshots
        uses: actions/upload-artifact@v3
        if: ${{ failure() }}
        with:
          name: cypress-screenshots-chrome
          path: cypress/screenshots
          # armazena por 30 dias
          retention-days: 30
